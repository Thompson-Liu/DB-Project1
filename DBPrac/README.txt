The top-level class of our code is src/controllers/Interpreter.java, which reads the input and produces output. 

In our implementation, lowkey and highkey are found and set by the class parser/IndexConditionSeparator.java, which implements ExpressionVisitor and divides a selection condition into a portion that can be handled by the index and a portion that can't. After that, they are set upon construction of IndexScanOperator. 

Clustered and unclustered indexes are handled differently in BulkLoader.java and IndexScanOperator.java, where we implemente the Bulk Loading algorithm and the index scan operator, respectively. For example, in IndexScanOperator, we scan the sorted data file itself if the index is clustered. However, if the index is unclustered, we examine the current data entry and figure out and go through the index for each tuple. 

We used Depth-First Search to perform the root-to-leaf tree descent. We first find the location of the first key that's greater than low key, and then find the rid of the first key that falls within the range of the scan. After that, we either start scanning the sorted data file or keeping track of the next rid and retrieving the corresponding tuple from the data file, depending on whether the index is clustered or not. When it comes to nodes that are deserialized, we deserialize only the pages that we need while looking for low key. Once we grab the next data entry from the leaf, we stop the deserialization process. For more details please look at our deserializer bpTree/deserializer.java.

If the interpreter is not supposed to build index as indicated by the config file or the index file doesn't exist in our catalog, we will build a full-scan operator just like in Project 2. Otherwise, we will build an index-scan operator and use an IndexConditionSeparator to separate out the portion of the selection which can/cannot be handled via the index. More specifically, we do this by visiting each sub-expression, updating low/high key and setting those that could be handled by the index to null along the way. After that, we will do another select operation on the tuples index scan operator has selected, with the remaining selection expression. 
